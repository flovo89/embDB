// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: embdb-layout.proto

#include "embdb-layout.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_embdb_2dlayout_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_embdb_2dlayout_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DataItem;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_embdb_2dlayout_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Header;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_embdb_2dlayout_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DataRow;
}  // namespace protobuf_embdb_2dlayout_2eproto
namespace embDB_protolayout {
class HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Header>
      _instance;
} _Header_default_instance_;
class DataItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataItem>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr datastring_;
  ::google::protobuf::uint32 datauint32_;
  ::google::protobuf::int32 dataint32_;
  ::google::protobuf::uint64 datauint64_;
  ::google::protobuf::int64 dataint64_;
  float datafloat_;
  double datadouble_;
  bool databool_;
  ::google::protobuf::internal::ArenaStringPtr databytes_;
} _DataItem_default_instance_;
class DataRowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataRow>
      _instance;
} _DataRow_default_instance_;
class DataLayoutDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataLayout>
      _instance;
} _DataLayout_default_instance_;
}  // namespace embDB_protolayout
namespace protobuf_embdb_2dlayout_2eproto {
static void InitDefaultsHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::embDB_protolayout::_Header_default_instance_;
    new (ptr) ::embDB_protolayout::Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::embDB_protolayout::Header::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Header =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeader}, {}};

static void InitDefaultsDataItem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::embDB_protolayout::_DataItem_default_instance_;
    new (ptr) ::embDB_protolayout::DataItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::embDB_protolayout::DataItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DataItem =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDataItem}, {}};

static void InitDefaultsDataRow() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::embDB_protolayout::_DataRow_default_instance_;
    new (ptr) ::embDB_protolayout::DataRow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::embDB_protolayout::DataRow::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DataRow =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDataRow}, {
      &protobuf_embdb_2dlayout_2eproto::scc_info_DataItem.base,}};

static void InitDefaultsDataLayout() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::embDB_protolayout::_DataLayout_default_instance_;
    new (ptr) ::embDB_protolayout::DataLayout();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::embDB_protolayout::DataLayout::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DataLayout =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDataLayout}, {
      &protobuf_embdb_2dlayout_2eproto::scc_info_Header.base,
      &protobuf_embdb_2dlayout_2eproto::scc_info_DataRow.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Header.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DataItem.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DataRow.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DataLayout.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::embDB_protolayout::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::embDB_protolayout::Header, version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::embDB_protolayout::DataItem, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::embDB_protolayout::DataItem, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::embDB_protolayout::DataItem, timestamp_),
  offsetof(::embDB_protolayout::DataItemDefaultTypeInternal, datastring_),
  offsetof(::embDB_protolayout::DataItemDefaultTypeInternal, datauint32_),
  offsetof(::embDB_protolayout::DataItemDefaultTypeInternal, dataint32_),
  offsetof(::embDB_protolayout::DataItemDefaultTypeInternal, datauint64_),
  offsetof(::embDB_protolayout::DataItemDefaultTypeInternal, dataint64_),
  offsetof(::embDB_protolayout::DataItemDefaultTypeInternal, datafloat_),
  offsetof(::embDB_protolayout::DataItemDefaultTypeInternal, datadouble_),
  offsetof(::embDB_protolayout::DataItemDefaultTypeInternal, databool_),
  offsetof(::embDB_protolayout::DataItemDefaultTypeInternal, databytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::embDB_protolayout::DataItem, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::embDB_protolayout::DataRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::embDB_protolayout::DataRow, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::embDB_protolayout::DataRow, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::embDB_protolayout::DataRow, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::embDB_protolayout::DataRow, maxitems_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::embDB_protolayout::DataRow, curitem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::embDB_protolayout::DataRow, overflow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::embDB_protolayout::DataRow, items_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::embDB_protolayout::DataLayout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::embDB_protolayout::DataLayout, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::embDB_protolayout::DataLayout, rows_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::embDB_protolayout::Header)},
  { 6, -1, sizeof(::embDB_protolayout::DataItem)},
  { 22, -1, sizeof(::embDB_protolayout::DataRow)},
  { 34, -1, sizeof(::embDB_protolayout::DataLayout)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::embDB_protolayout::_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::embDB_protolayout::_DataItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::embDB_protolayout::_DataRow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::embDB_protolayout::_DataLayout_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "embdb-layout.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022embdb-layout.proto\022\021embDB_protolayout\""
      "\031\n\006Header\022\017\n\007version\030\001 \001(\r\"\345\001\n\010DataItem\022"
      "\021\n\ttimestamp\030\001 \001(\003\022\024\n\ndataString\030\002 \001(\tH\000"
      "\022\024\n\ndataUint32\030\003 \001(\rH\000\022\023\n\tdataInt32\030\004 \001("
      "\005H\000\022\024\n\ndataUint64\030\005 \001(\004H\000\022\023\n\tdataInt64\030\006"
      " \001(\003H\000\022\023\n\tdataFloat\030\007 \001(\002H\000\022\024\n\ndataDoubl"
      "e\030\010 \001(\001H\000\022\022\n\010dataBool\030\t \001(\010H\000\022\023\n\tdataByt"
      "es\030\n \001(\014H\000B\006\n\004data\"\261\001\n\007DataRow\022\014\n\004hash\030\001"
      " \001(\004\022\014\n\004name\030\002 \001(\t\022)\n\004type\030\003 \001(\0162\033.embDB"
      "_protolayout.DataType\022\020\n\010maxItems\030\004 \001(\r\022"
      "\017\n\007curItem\030\005 \001(\r\022\020\n\010overflow\030\006 \001(\010\022*\n\005it"
      "ems\030\007 \003(\0132\033.embDB_protolayout.DataItem\"a"
      "\n\nDataLayout\022)\n\006header\030\001 \001(\0132\031.embDB_pro"
      "tolayout.Header\022(\n\004rows\030\002 \003(\0132\032.embDB_pr"
      "otolayout.DataRow*z\n\010DataType\022\010\n\004NONE\020\000\022"
      "\n\n\006STRING\020\001\022\n\n\006UINT32\020\002\022\t\n\005INT32\020\003\022\n\n\006UI"
      "NT64\020\004\022\t\n\005INT64\020\005\022\t\n\005FLOAT\020\006\022\n\n\006DOUBLE\020\007"
      "\022\010\n\004BOOL\020\010\022\t\n\005BYTES\020\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 709);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "embdb-layout.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_embdb_2dlayout_2eproto
namespace embDB_protolayout {
const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
  protobuf_embdb_2dlayout_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_embdb_2dlayout_2eproto::file_level_enum_descriptors[0];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Header::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_embdb_2dlayout_2eproto::scc_info_Header.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:embDB_protolayout.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:embDB_protolayout.Header)
}

void Header::SharedCtor() {
  version_ = 0u;
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:embDB_protolayout.Header)
  SharedDtor();
}

void Header::SharedDtor() {
}

void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  ::protobuf_embdb_2dlayout_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_embdb_2dlayout_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_embdb_2dlayout_2eproto::scc_info_Header.base);
  return *internal_default_instance();
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:embDB_protolayout.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_ = 0u;
  _internal_metadata_.Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:embDB_protolayout.Header)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:embDB_protolayout.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:embDB_protolayout.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:embDB_protolayout.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:embDB_protolayout.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:embDB_protolayout.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:embDB_protolayout.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:embDB_protolayout.Header)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:embDB_protolayout.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:embDB_protolayout.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:embDB_protolayout.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:embDB_protolayout.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version() != 0) {
    set_version(from.version());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:embDB_protolayout.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:embDB_protolayout.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  swap(version_, other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_embdb_2dlayout_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_embdb_2dlayout_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DataItem::InitAsDefaultInstance() {
  ::embDB_protolayout::_DataItem_default_instance_.datastring_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::embDB_protolayout::_DataItem_default_instance_.datauint32_ = 0u;
  ::embDB_protolayout::_DataItem_default_instance_.dataint32_ = 0;
  ::embDB_protolayout::_DataItem_default_instance_.datauint64_ = GOOGLE_ULONGLONG(0);
  ::embDB_protolayout::_DataItem_default_instance_.dataint64_ = GOOGLE_LONGLONG(0);
  ::embDB_protolayout::_DataItem_default_instance_.datafloat_ = 0;
  ::embDB_protolayout::_DataItem_default_instance_.datadouble_ = 0;
  ::embDB_protolayout::_DataItem_default_instance_.databool_ = false;
  ::embDB_protolayout::_DataItem_default_instance_.databytes_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataItem::kTimestampFieldNumber;
const int DataItem::kDataStringFieldNumber;
const int DataItem::kDataUint32FieldNumber;
const int DataItem::kDataInt32FieldNumber;
const int DataItem::kDataUint64FieldNumber;
const int DataItem::kDataInt64FieldNumber;
const int DataItem::kDataFloatFieldNumber;
const int DataItem::kDataDoubleFieldNumber;
const int DataItem::kDataBoolFieldNumber;
const int DataItem::kDataBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataItem::DataItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_embdb_2dlayout_2eproto::scc_info_DataItem.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:embDB_protolayout.DataItem)
}
DataItem::DataItem(const DataItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  clear_has_data();
  switch (from.data_case()) {
    case kDataString: {
      set_datastring(from.datastring());
      break;
    }
    case kDataUint32: {
      set_datauint32(from.datauint32());
      break;
    }
    case kDataInt32: {
      set_dataint32(from.dataint32());
      break;
    }
    case kDataUint64: {
      set_datauint64(from.datauint64());
      break;
    }
    case kDataInt64: {
      set_dataint64(from.dataint64());
      break;
    }
    case kDataFloat: {
      set_datafloat(from.datafloat());
      break;
    }
    case kDataDouble: {
      set_datadouble(from.datadouble());
      break;
    }
    case kDataBool: {
      set_databool(from.databool());
      break;
    }
    case kDataBytes: {
      set_databytes(from.databytes());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:embDB_protolayout.DataItem)
}

void DataItem::SharedCtor() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_data();
}

DataItem::~DataItem() {
  // @@protoc_insertion_point(destructor:embDB_protolayout.DataItem)
  SharedDtor();
}

void DataItem::SharedDtor() {
  if (has_data()) {
    clear_data();
  }
}

void DataItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DataItem::descriptor() {
  ::protobuf_embdb_2dlayout_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_embdb_2dlayout_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataItem& DataItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_embdb_2dlayout_2eproto::scc_info_DataItem.base);
  return *internal_default_instance();
}


void DataItem::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:embDB_protolayout.DataItem)
  switch (data_case()) {
    case kDataString: {
      data_.datastring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kDataUint32: {
      // No need to clear
      break;
    }
    case kDataInt32: {
      // No need to clear
      break;
    }
    case kDataUint64: {
      // No need to clear
      break;
    }
    case kDataInt64: {
      // No need to clear
      break;
    }
    case kDataFloat: {
      // No need to clear
      break;
    }
    case kDataDouble: {
      // No need to clear
      break;
    }
    case kDataBool: {
      // No need to clear
      break;
    }
    case kDataBytes: {
      data_.databytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void DataItem::Clear() {
// @@protoc_insertion_point(message_clear_start:embDB_protolayout.DataItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = GOOGLE_LONGLONG(0);
  clear_data();
  _internal_metadata_.Clear();
}

bool DataItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:embDB_protolayout.DataItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dataString = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datastring()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->datastring().data(), static_cast<int>(this->datastring().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "embDB_protolayout.DataItem.dataString"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dataUint32 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          clear_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_.datauint32_)));
          set_has_datauint32();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dataInt32 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          clear_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_.dataint32_)));
          set_has_dataint32();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dataUint64 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          clear_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_.datauint64_)));
          set_has_datauint64();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 dataInt64 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          clear_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_.dataint64_)));
          set_has_dataint64();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dataFloat = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          clear_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &data_.datafloat_)));
          set_has_datafloat();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double dataDouble = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          clear_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &data_.datadouble_)));
          set_has_datadouble();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool dataBool = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          clear_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &data_.databool_)));
          set_has_databool();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes dataBytes = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_databytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:embDB_protolayout.DataItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:embDB_protolayout.DataItem)
  return false;
#undef DO_
}

void DataItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:embDB_protolayout.DataItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // string dataString = 2;
  if (has_datastring()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->datastring().data(), static_cast<int>(this->datastring().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "embDB_protolayout.DataItem.dataString");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->datastring(), output);
  }

  // uint32 dataUint32 = 3;
  if (has_datauint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->datauint32(), output);
  }

  // int32 dataInt32 = 4;
  if (has_dataint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dataint32(), output);
  }

  // uint64 dataUint64 = 5;
  if (has_datauint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->datauint64(), output);
  }

  // int64 dataInt64 = 6;
  if (has_dataint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->dataint64(), output);
  }

  // float dataFloat = 7;
  if (has_datafloat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->datafloat(), output);
  }

  // double dataDouble = 8;
  if (has_datadouble()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->datadouble(), output);
  }

  // bool dataBool = 9;
  if (has_databool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->databool(), output);
  }

  // bytes dataBytes = 10;
  if (has_databytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->databytes(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:embDB_protolayout.DataItem)
}

::google::protobuf::uint8* DataItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:embDB_protolayout.DataItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // string dataString = 2;
  if (has_datastring()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->datastring().data(), static_cast<int>(this->datastring().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "embDB_protolayout.DataItem.dataString");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->datastring(), target);
  }

  // uint32 dataUint32 = 3;
  if (has_datauint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->datauint32(), target);
  }

  // int32 dataInt32 = 4;
  if (has_dataint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dataint32(), target);
  }

  // uint64 dataUint64 = 5;
  if (has_datauint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->datauint64(), target);
  }

  // int64 dataInt64 = 6;
  if (has_dataint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->dataint64(), target);
  }

  // float dataFloat = 7;
  if (has_datafloat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->datafloat(), target);
  }

  // double dataDouble = 8;
  if (has_datadouble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->datadouble(), target);
  }

  // bool dataBool = 9;
  if (has_databool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->databool(), target);
  }

  // bytes dataBytes = 10;
  if (has_databytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->databytes(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:embDB_protolayout.DataItem)
  return target;
}

size_t DataItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:embDB_protolayout.DataItem)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  switch (data_case()) {
    // string dataString = 2;
    case kDataString: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datastring());
      break;
    }
    // uint32 dataUint32 = 3;
    case kDataUint32: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->datauint32());
      break;
    }
    // int32 dataInt32 = 4;
    case kDataInt32: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dataint32());
      break;
    }
    // uint64 dataUint64 = 5;
    case kDataUint64: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->datauint64());
      break;
    }
    // int64 dataInt64 = 6;
    case kDataInt64: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dataint64());
      break;
    }
    // float dataFloat = 7;
    case kDataFloat: {
      total_size += 1 + 4;
      break;
    }
    // double dataDouble = 8;
    case kDataDouble: {
      total_size += 1 + 8;
      break;
    }
    // bool dataBool = 9;
    case kDataBool: {
      total_size += 1 + 1;
      break;
    }
    // bytes dataBytes = 10;
    case kDataBytes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->databytes());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:embDB_protolayout.DataItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DataItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:embDB_protolayout.DataItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:embDB_protolayout.DataItem)
    MergeFrom(*source);
  }
}

void DataItem::MergeFrom(const DataItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:embDB_protolayout.DataItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  switch (from.data_case()) {
    case kDataString: {
      set_datastring(from.datastring());
      break;
    }
    case kDataUint32: {
      set_datauint32(from.datauint32());
      break;
    }
    case kDataInt32: {
      set_dataint32(from.dataint32());
      break;
    }
    case kDataUint64: {
      set_datauint64(from.datauint64());
      break;
    }
    case kDataInt64: {
      set_dataint64(from.dataint64());
      break;
    }
    case kDataFloat: {
      set_datafloat(from.datafloat());
      break;
    }
    case kDataDouble: {
      set_datadouble(from.datadouble());
      break;
    }
    case kDataBool: {
      set_databool(from.databool());
      break;
    }
    case kDataBytes: {
      set_databytes(from.databytes());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void DataItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:embDB_protolayout.DataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataItem::CopyFrom(const DataItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:embDB_protolayout.DataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataItem::IsInitialized() const {
  return true;
}

void DataItem::Swap(DataItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataItem::InternalSwap(DataItem* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DataItem::GetMetadata() const {
  protobuf_embdb_2dlayout_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_embdb_2dlayout_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DataRow::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataRow::kHashFieldNumber;
const int DataRow::kNameFieldNumber;
const int DataRow::kTypeFieldNumber;
const int DataRow::kMaxItemsFieldNumber;
const int DataRow::kCurItemFieldNumber;
const int DataRow::kOverflowFieldNumber;
const int DataRow::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataRow::DataRow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_embdb_2dlayout_2eproto::scc_info_DataRow.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:embDB_protolayout.DataRow)
}
DataRow::DataRow(const DataRow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&hash_, &from.hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&overflow_) -
    reinterpret_cast<char*>(&hash_)) + sizeof(overflow_));
  // @@protoc_insertion_point(copy_constructor:embDB_protolayout.DataRow)
}

void DataRow::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overflow_) -
      reinterpret_cast<char*>(&hash_)) + sizeof(overflow_));
}

DataRow::~DataRow() {
  // @@protoc_insertion_point(destructor:embDB_protolayout.DataRow)
  SharedDtor();
}

void DataRow::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DataRow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DataRow::descriptor() {
  ::protobuf_embdb_2dlayout_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_embdb_2dlayout_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataRow& DataRow::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_embdb_2dlayout_2eproto::scc_info_DataRow.base);
  return *internal_default_instance();
}


void DataRow::Clear() {
// @@protoc_insertion_point(message_clear_start:embDB_protolayout.DataRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overflow_) -
      reinterpret_cast<char*>(&hash_)) + sizeof(overflow_));
  _internal_metadata_.Clear();
}

bool DataRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:embDB_protolayout.DataRow)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "embDB_protolayout.DataRow.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .embDB_protolayout.DataType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::embDB_protolayout::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 maxItems = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxitems_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 curItem = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curitem_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool overflow = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &overflow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .embDB_protolayout.DataItem items = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:embDB_protolayout.DataRow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:embDB_protolayout.DataRow)
  return false;
#undef DO_
}

void DataRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:embDB_protolayout.DataRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 hash = 1;
  if (this->hash() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->hash(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "embDB_protolayout.DataRow.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .embDB_protolayout.DataType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // uint32 maxItems = 4;
  if (this->maxitems() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxitems(), output);
  }

  // uint32 curItem = 5;
  if (this->curitem() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->curitem(), output);
  }

  // bool overflow = 6;
  if (this->overflow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->overflow(), output);
  }

  // repeated .embDB_protolayout.DataItem items = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->items(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:embDB_protolayout.DataRow)
}

::google::protobuf::uint8* DataRow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:embDB_protolayout.DataRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 hash = 1;
  if (this->hash() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->hash(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "embDB_protolayout.DataRow.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .embDB_protolayout.DataType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // uint32 maxItems = 4;
  if (this->maxitems() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxitems(), target);
  }

  // uint32 curItem = 5;
  if (this->curitem() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->curitem(), target);
  }

  // bool overflow = 6;
  if (this->overflow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->overflow(), target);
  }

  // repeated .embDB_protolayout.DataItem items = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->items(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:embDB_protolayout.DataRow)
  return target;
}

size_t DataRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:embDB_protolayout.DataRow)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .embDB_protolayout.DataItem items = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->items(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint64 hash = 1;
  if (this->hash() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->hash());
  }

  // .embDB_protolayout.DataType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 maxItems = 4;
  if (this->maxitems() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxitems());
  }

  // uint32 curItem = 5;
  if (this->curitem() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curitem());
  }

  // bool overflow = 6;
  if (this->overflow() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataRow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:embDB_protolayout.DataRow)
  GOOGLE_DCHECK_NE(&from, this);
  const DataRow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataRow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:embDB_protolayout.DataRow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:embDB_protolayout.DataRow)
    MergeFrom(*source);
  }
}

void DataRow::MergeFrom(const DataRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:embDB_protolayout.DataRow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.hash() != 0) {
    set_hash(from.hash());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.maxitems() != 0) {
    set_maxitems(from.maxitems());
  }
  if (from.curitem() != 0) {
    set_curitem(from.curitem());
  }
  if (from.overflow() != 0) {
    set_overflow(from.overflow());
  }
}

void DataRow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:embDB_protolayout.DataRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataRow::CopyFrom(const DataRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:embDB_protolayout.DataRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataRow::IsInitialized() const {
  return true;
}

void DataRow::Swap(DataRow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataRow::InternalSwap(DataRow* other) {
  using std::swap;
  CastToBase(&items_)->InternalSwap(CastToBase(&other->items_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hash_, other->hash_);
  swap(type_, other->type_);
  swap(maxitems_, other->maxitems_);
  swap(curitem_, other->curitem_);
  swap(overflow_, other->overflow_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DataRow::GetMetadata() const {
  protobuf_embdb_2dlayout_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_embdb_2dlayout_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DataLayout::InitAsDefaultInstance() {
  ::embDB_protolayout::_DataLayout_default_instance_._instance.get_mutable()->header_ = const_cast< ::embDB_protolayout::Header*>(
      ::embDB_protolayout::Header::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataLayout::kHeaderFieldNumber;
const int DataLayout::kRowsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataLayout::DataLayout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_embdb_2dlayout_2eproto::scc_info_DataLayout.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:embDB_protolayout.DataLayout)
}
DataLayout::DataLayout(const DataLayout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rows_(from.rows_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::embDB_protolayout::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:embDB_protolayout.DataLayout)
}

void DataLayout::SharedCtor() {
  header_ = NULL;
}

DataLayout::~DataLayout() {
  // @@protoc_insertion_point(destructor:embDB_protolayout.DataLayout)
  SharedDtor();
}

void DataLayout::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void DataLayout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DataLayout::descriptor() {
  ::protobuf_embdb_2dlayout_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_embdb_2dlayout_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataLayout& DataLayout::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_embdb_2dlayout_2eproto::scc_info_DataLayout.base);
  return *internal_default_instance();
}


void DataLayout::Clear() {
// @@protoc_insertion_point(message_clear_start:embDB_protolayout.DataLayout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rows_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool DataLayout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:embDB_protolayout.DataLayout)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .embDB_protolayout.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .embDB_protolayout.DataRow rows = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:embDB_protolayout.DataLayout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:embDB_protolayout.DataLayout)
  return false;
#undef DO_
}

void DataLayout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:embDB_protolayout.DataLayout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .embDB_protolayout.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // repeated .embDB_protolayout.DataRow rows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rows_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->rows(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:embDB_protolayout.DataLayout)
}

::google::protobuf::uint8* DataLayout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:embDB_protolayout.DataLayout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .embDB_protolayout.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // repeated .embDB_protolayout.DataRow rows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rows_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->rows(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:embDB_protolayout.DataLayout)
  return target;
}

size_t DataLayout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:embDB_protolayout.DataLayout)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .embDB_protolayout.DataRow rows = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->rows_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rows(static_cast<int>(i)));
    }
  }

  // .embDB_protolayout.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataLayout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:embDB_protolayout.DataLayout)
  GOOGLE_DCHECK_NE(&from, this);
  const DataLayout* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataLayout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:embDB_protolayout.DataLayout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:embDB_protolayout.DataLayout)
    MergeFrom(*source);
  }
}

void DataLayout::MergeFrom(const DataLayout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:embDB_protolayout.DataLayout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rows_.MergeFrom(from.rows_);
  if (from.has_header()) {
    mutable_header()->::embDB_protolayout::Header::MergeFrom(from.header());
  }
}

void DataLayout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:embDB_protolayout.DataLayout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataLayout::CopyFrom(const DataLayout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:embDB_protolayout.DataLayout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataLayout::IsInitialized() const {
  return true;
}

void DataLayout::Swap(DataLayout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataLayout::InternalSwap(DataLayout* other) {
  using std::swap;
  CastToBase(&rows_)->InternalSwap(CastToBase(&other->rows_));
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DataLayout::GetMetadata() const {
  protobuf_embdb_2dlayout_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_embdb_2dlayout_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace embDB_protolayout
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::embDB_protolayout::Header* Arena::CreateMaybeMessage< ::embDB_protolayout::Header >(Arena* arena) {
  return Arena::CreateInternal< ::embDB_protolayout::Header >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::embDB_protolayout::DataItem* Arena::CreateMaybeMessage< ::embDB_protolayout::DataItem >(Arena* arena) {
  return Arena::CreateInternal< ::embDB_protolayout::DataItem >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::embDB_protolayout::DataRow* Arena::CreateMaybeMessage< ::embDB_protolayout::DataRow >(Arena* arena) {
  return Arena::CreateInternal< ::embDB_protolayout::DataRow >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::embDB_protolayout::DataLayout* Arena::CreateMaybeMessage< ::embDB_protolayout::DataLayout >(Arena* arena) {
  return Arena::CreateInternal< ::embDB_protolayout::DataLayout >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
