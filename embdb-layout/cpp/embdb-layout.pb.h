// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: embdb-layout.proto

#ifndef PROTOBUF_INCLUDED_embdb_2dlayout_2eproto
#define PROTOBUF_INCLUDED_embdb_2dlayout_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_embdb_2dlayout_2eproto 

namespace protobuf_embdb_2dlayout_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_embdb_2dlayout_2eproto
namespace embDB_protolayout {
class DataItem;
class DataItemDefaultTypeInternal;
extern DataItemDefaultTypeInternal _DataItem_default_instance_;
class DataLayout;
class DataLayoutDefaultTypeInternal;
extern DataLayoutDefaultTypeInternal _DataLayout_default_instance_;
class DataRow;
class DataRowDefaultTypeInternal;
extern DataRowDefaultTypeInternal _DataRow_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
}  // namespace embDB_protolayout
namespace google {
namespace protobuf {
template<> ::embDB_protolayout::DataItem* Arena::CreateMaybeMessage<::embDB_protolayout::DataItem>(Arena*);
template<> ::embDB_protolayout::DataLayout* Arena::CreateMaybeMessage<::embDB_protolayout::DataLayout>(Arena*);
template<> ::embDB_protolayout::DataRow* Arena::CreateMaybeMessage<::embDB_protolayout::DataRow>(Arena*);
template<> ::embDB_protolayout::Header* Arena::CreateMaybeMessage<::embDB_protolayout::Header>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace embDB_protolayout {

enum DataType {
  NONE = 0,
  STRING = 1,
  UINT32 = 2,
  INT32 = 3,
  UINT64 = 4,
  INT64 = 5,
  FLOAT = 6,
  DOUBLE = 7,
  BOOL = 8,
  BYTES = 9,
  DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DataType_IsValid(int value);
const DataType DataType_MIN = NONE;
const DataType DataType_MAX = BYTES;
const int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataType_descriptor();
inline const ::std::string& DataType_Name(DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataType_descriptor(), value);
}
inline bool DataType_Parse(
    const ::std::string& name, DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
// ===================================================================

class Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:embDB_protolayout.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Header* other);
  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(NULL);
  }

  Header* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:embDB_protolayout.Header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_embdb_2dlayout_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:embDB_protolayout.DataItem) */ {
 public:
  DataItem();
  virtual ~DataItem();

  DataItem(const DataItem& from);

  inline DataItem& operator=(const DataItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataItem(DataItem&& from) noexcept
    : DataItem() {
    *this = ::std::move(from);
  }

  inline DataItem& operator=(DataItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataItem& default_instance();

  enum DataCase {
    kDataString = 2,
    kDataUint32 = 3,
    kDataInt32 = 4,
    kDataUint64 = 5,
    kDataInt64 = 6,
    kDataFloat = 7,
    kDataDouble = 8,
    kDataBool = 9,
    kDataBytes = 10,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataItem* internal_default_instance() {
    return reinterpret_cast<const DataItem*>(
               &_DataItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DataItem* other);
  friend void swap(DataItem& a, DataItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataItem* New() const final {
    return CreateMaybeMessage<DataItem>(NULL);
  }

  DataItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataItem& from);
  void MergeFrom(const DataItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // string dataString = 2;
  private:
  bool has_datastring() const;
  public:
  void clear_datastring();
  static const int kDataStringFieldNumber = 2;
  const ::std::string& datastring() const;
  void set_datastring(const ::std::string& value);
  #if LANG_CXX11
  void set_datastring(::std::string&& value);
  #endif
  void set_datastring(const char* value);
  void set_datastring(const char* value, size_t size);
  ::std::string* mutable_datastring();
  ::std::string* release_datastring();
  void set_allocated_datastring(::std::string* datastring);

  // uint32 dataUint32 = 3;
  private:
  bool has_datauint32() const;
  public:
  void clear_datauint32();
  static const int kDataUint32FieldNumber = 3;
  ::google::protobuf::uint32 datauint32() const;
  void set_datauint32(::google::protobuf::uint32 value);

  // int32 dataInt32 = 4;
  private:
  bool has_dataint32() const;
  public:
  void clear_dataint32();
  static const int kDataInt32FieldNumber = 4;
  ::google::protobuf::int32 dataint32() const;
  void set_dataint32(::google::protobuf::int32 value);

  // uint64 dataUint64 = 5;
  private:
  bool has_datauint64() const;
  public:
  void clear_datauint64();
  static const int kDataUint64FieldNumber = 5;
  ::google::protobuf::uint64 datauint64() const;
  void set_datauint64(::google::protobuf::uint64 value);

  // int64 dataInt64 = 6;
  private:
  bool has_dataint64() const;
  public:
  void clear_dataint64();
  static const int kDataInt64FieldNumber = 6;
  ::google::protobuf::int64 dataint64() const;
  void set_dataint64(::google::protobuf::int64 value);

  // float dataFloat = 7;
  private:
  bool has_datafloat() const;
  public:
  void clear_datafloat();
  static const int kDataFloatFieldNumber = 7;
  float datafloat() const;
  void set_datafloat(float value);

  // double dataDouble = 8;
  private:
  bool has_datadouble() const;
  public:
  void clear_datadouble();
  static const int kDataDoubleFieldNumber = 8;
  double datadouble() const;
  void set_datadouble(double value);

  // bool dataBool = 9;
  private:
  bool has_databool() const;
  public:
  void clear_databool();
  static const int kDataBoolFieldNumber = 9;
  bool databool() const;
  void set_databool(bool value);

  // bytes dataBytes = 10;
  private:
  bool has_databytes() const;
  public:
  void clear_databytes();
  static const int kDataBytesFieldNumber = 10;
  const ::std::string& databytes() const;
  void set_databytes(const ::std::string& value);
  #if LANG_CXX11
  void set_databytes(::std::string&& value);
  #endif
  void set_databytes(const char* value);
  void set_databytes(const void* value, size_t size);
  ::std::string* mutable_databytes();
  ::std::string* release_databytes();
  void set_allocated_databytes(::std::string* databytes);

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:embDB_protolayout.DataItem)
 private:
  void set_has_datastring();
  void set_has_datauint32();
  void set_has_dataint32();
  void set_has_datauint64();
  void set_has_dataint64();
  void set_has_datafloat();
  void set_has_datadouble();
  void set_has_databool();
  void set_has_databytes();

  inline bool has_data() const;
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 timestamp_;
  union DataUnion {
    DataUnion() {}
    ::google::protobuf::internal::ArenaStringPtr datastring_;
    ::google::protobuf::uint32 datauint32_;
    ::google::protobuf::int32 dataint32_;
    ::google::protobuf::uint64 datauint64_;
    ::google::protobuf::int64 dataint64_;
    float datafloat_;
    double datadouble_;
    bool databool_;
    ::google::protobuf::internal::ArenaStringPtr databytes_;
  } data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_embdb_2dlayout_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataRow : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:embDB_protolayout.DataRow) */ {
 public:
  DataRow();
  virtual ~DataRow();

  DataRow(const DataRow& from);

  inline DataRow& operator=(const DataRow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataRow(DataRow&& from) noexcept
    : DataRow() {
    *this = ::std::move(from);
  }

  inline DataRow& operator=(DataRow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataRow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataRow* internal_default_instance() {
    return reinterpret_cast<const DataRow*>(
               &_DataRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(DataRow* other);
  friend void swap(DataRow& a, DataRow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataRow* New() const final {
    return CreateMaybeMessage<DataRow>(NULL);
  }

  DataRow* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataRow>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataRow& from);
  void MergeFrom(const DataRow& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataRow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .embDB_protolayout.DataItem items = 7;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 7;
  ::embDB_protolayout::DataItem* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::embDB_protolayout::DataItem >*
      mutable_items();
  const ::embDB_protolayout::DataItem& items(int index) const;
  ::embDB_protolayout::DataItem* add_items();
  const ::google::protobuf::RepeatedPtrField< ::embDB_protolayout::DataItem >&
      items() const;

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint64 hash = 1;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  ::google::protobuf::uint64 hash() const;
  void set_hash(::google::protobuf::uint64 value);

  // .embDB_protolayout.DataType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::embDB_protolayout::DataType type() const;
  void set_type(::embDB_protolayout::DataType value);

  // uint32 maxItems = 4;
  void clear_maxitems();
  static const int kMaxItemsFieldNumber = 4;
  ::google::protobuf::uint32 maxitems() const;
  void set_maxitems(::google::protobuf::uint32 value);

  // uint32 curItem = 5;
  void clear_curitem();
  static const int kCurItemFieldNumber = 5;
  ::google::protobuf::uint32 curitem() const;
  void set_curitem(::google::protobuf::uint32 value);

  // bool overflow = 6;
  void clear_overflow();
  static const int kOverflowFieldNumber = 6;
  bool overflow() const;
  void set_overflow(bool value);

  // @@protoc_insertion_point(class_scope:embDB_protolayout.DataRow)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::embDB_protolayout::DataItem > items_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 hash_;
  int type_;
  ::google::protobuf::uint32 maxitems_;
  ::google::protobuf::uint32 curitem_;
  bool overflow_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_embdb_2dlayout_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataLayout : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:embDB_protolayout.DataLayout) */ {
 public:
  DataLayout();
  virtual ~DataLayout();

  DataLayout(const DataLayout& from);

  inline DataLayout& operator=(const DataLayout& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataLayout(DataLayout&& from) noexcept
    : DataLayout() {
    *this = ::std::move(from);
  }

  inline DataLayout& operator=(DataLayout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataLayout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataLayout* internal_default_instance() {
    return reinterpret_cast<const DataLayout*>(
               &_DataLayout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DataLayout* other);
  friend void swap(DataLayout& a, DataLayout& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataLayout* New() const final {
    return CreateMaybeMessage<DataLayout>(NULL);
  }

  DataLayout* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataLayout>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataLayout& from);
  void MergeFrom(const DataLayout& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataLayout* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .embDB_protolayout.DataRow rows = 2;
  int rows_size() const;
  void clear_rows();
  static const int kRowsFieldNumber = 2;
  ::embDB_protolayout::DataRow* mutable_rows(int index);
  ::google::protobuf::RepeatedPtrField< ::embDB_protolayout::DataRow >*
      mutable_rows();
  const ::embDB_protolayout::DataRow& rows(int index) const;
  ::embDB_protolayout::DataRow* add_rows();
  const ::google::protobuf::RepeatedPtrField< ::embDB_protolayout::DataRow >&
      rows() const;

  // .embDB_protolayout.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::embDB_protolayout::Header& _internal_header() const;
  public:
  const ::embDB_protolayout::Header& header() const;
  ::embDB_protolayout::Header* release_header();
  ::embDB_protolayout::Header* mutable_header();
  void set_allocated_header(::embDB_protolayout::Header* header);

  // @@protoc_insertion_point(class_scope:embDB_protolayout.DataLayout)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::embDB_protolayout::DataRow > rows_;
  ::embDB_protolayout::Header* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_embdb_2dlayout_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// uint32 version = 1;
inline void Header::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 Header::version() const {
  // @@protoc_insertion_point(field_get:embDB_protolayout.Header.version)
  return version_;
}
inline void Header::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:embDB_protolayout.Header.version)
}

// -------------------------------------------------------------------

// DataItem

// int64 timestamp = 1;
inline void DataItem::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DataItem::timestamp() const {
  // @@protoc_insertion_point(field_get:embDB_protolayout.DataItem.timestamp)
  return timestamp_;
}
inline void DataItem::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:embDB_protolayout.DataItem.timestamp)
}

// string dataString = 2;
inline bool DataItem::has_datastring() const {
  return data_case() == kDataString;
}
inline void DataItem::set_has_datastring() {
  _oneof_case_[0] = kDataString;
}
inline void DataItem::clear_datastring() {
  if (has_datastring()) {
    data_.datastring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const ::std::string& DataItem::datastring() const {
  // @@protoc_insertion_point(field_get:embDB_protolayout.DataItem.dataString)
  if (has_datastring()) {
    return data_.datastring_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void DataItem::set_datastring(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:embDB_protolayout.DataItem.dataString)
  if (!has_datastring()) {
    clear_data();
    set_has_datastring();
    data_.datastring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.datastring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:embDB_protolayout.DataItem.dataString)
}
#if LANG_CXX11
inline void DataItem::set_datastring(::std::string&& value) {
  // @@protoc_insertion_point(field_set:embDB_protolayout.DataItem.dataString)
  if (!has_datastring()) {
    clear_data();
    set_has_datastring();
    data_.datastring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.datastring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:embDB_protolayout.DataItem.dataString)
}
#endif
inline void DataItem::set_datastring(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_datastring()) {
    clear_data();
    set_has_datastring();
    data_.datastring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.datastring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:embDB_protolayout.DataItem.dataString)
}
inline void DataItem::set_datastring(const char* value, size_t size) {
  if (!has_datastring()) {
    clear_data();
    set_has_datastring();
    data_.datastring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.datastring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:embDB_protolayout.DataItem.dataString)
}
inline ::std::string* DataItem::mutable_datastring() {
  if (!has_datastring()) {
    clear_data();
    set_has_datastring();
    data_.datastring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:embDB_protolayout.DataItem.dataString)
  return data_.datastring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataItem::release_datastring() {
  // @@protoc_insertion_point(field_release:embDB_protolayout.DataItem.dataString)
  if (has_datastring()) {
    clear_has_data();
    return data_.datastring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void DataItem::set_allocated_datastring(::std::string* datastring) {
  if (!has_datastring()) {
    data_.datastring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (datastring != NULL) {
    set_has_datastring();
    data_.datastring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), datastring);
  }
  // @@protoc_insertion_point(field_set_allocated:embDB_protolayout.DataItem.dataString)
}

// uint32 dataUint32 = 3;
inline bool DataItem::has_datauint32() const {
  return data_case() == kDataUint32;
}
inline void DataItem::set_has_datauint32() {
  _oneof_case_[0] = kDataUint32;
}
inline void DataItem::clear_datauint32() {
  if (has_datauint32()) {
    data_.datauint32_ = 0u;
    clear_has_data();
  }
}
inline ::google::protobuf::uint32 DataItem::datauint32() const {
  // @@protoc_insertion_point(field_get:embDB_protolayout.DataItem.dataUint32)
  if (has_datauint32()) {
    return data_.datauint32_;
  }
  return 0u;
}
inline void DataItem::set_datauint32(::google::protobuf::uint32 value) {
  if (!has_datauint32()) {
    clear_data();
    set_has_datauint32();
  }
  data_.datauint32_ = value;
  // @@protoc_insertion_point(field_set:embDB_protolayout.DataItem.dataUint32)
}

// int32 dataInt32 = 4;
inline bool DataItem::has_dataint32() const {
  return data_case() == kDataInt32;
}
inline void DataItem::set_has_dataint32() {
  _oneof_case_[0] = kDataInt32;
}
inline void DataItem::clear_dataint32() {
  if (has_dataint32()) {
    data_.dataint32_ = 0;
    clear_has_data();
  }
}
inline ::google::protobuf::int32 DataItem::dataint32() const {
  // @@protoc_insertion_point(field_get:embDB_protolayout.DataItem.dataInt32)
  if (has_dataint32()) {
    return data_.dataint32_;
  }
  return 0;
}
inline void DataItem::set_dataint32(::google::protobuf::int32 value) {
  if (!has_dataint32()) {
    clear_data();
    set_has_dataint32();
  }
  data_.dataint32_ = value;
  // @@protoc_insertion_point(field_set:embDB_protolayout.DataItem.dataInt32)
}

// uint64 dataUint64 = 5;
inline bool DataItem::has_datauint64() const {
  return data_case() == kDataUint64;
}
inline void DataItem::set_has_datauint64() {
  _oneof_case_[0] = kDataUint64;
}
inline void DataItem::clear_datauint64() {
  if (has_datauint64()) {
    data_.datauint64_ = GOOGLE_ULONGLONG(0);
    clear_has_data();
  }
}
inline ::google::protobuf::uint64 DataItem::datauint64() const {
  // @@protoc_insertion_point(field_get:embDB_protolayout.DataItem.dataUint64)
  if (has_datauint64()) {
    return data_.datauint64_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void DataItem::set_datauint64(::google::protobuf::uint64 value) {
  if (!has_datauint64()) {
    clear_data();
    set_has_datauint64();
  }
  data_.datauint64_ = value;
  // @@protoc_insertion_point(field_set:embDB_protolayout.DataItem.dataUint64)
}

// int64 dataInt64 = 6;
inline bool DataItem::has_dataint64() const {
  return data_case() == kDataInt64;
}
inline void DataItem::set_has_dataint64() {
  _oneof_case_[0] = kDataInt64;
}
inline void DataItem::clear_dataint64() {
  if (has_dataint64()) {
    data_.dataint64_ = GOOGLE_LONGLONG(0);
    clear_has_data();
  }
}
inline ::google::protobuf::int64 DataItem::dataint64() const {
  // @@protoc_insertion_point(field_get:embDB_protolayout.DataItem.dataInt64)
  if (has_dataint64()) {
    return data_.dataint64_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void DataItem::set_dataint64(::google::protobuf::int64 value) {
  if (!has_dataint64()) {
    clear_data();
    set_has_dataint64();
  }
  data_.dataint64_ = value;
  // @@protoc_insertion_point(field_set:embDB_protolayout.DataItem.dataInt64)
}

// float dataFloat = 7;
inline bool DataItem::has_datafloat() const {
  return data_case() == kDataFloat;
}
inline void DataItem::set_has_datafloat() {
  _oneof_case_[0] = kDataFloat;
}
inline void DataItem::clear_datafloat() {
  if (has_datafloat()) {
    data_.datafloat_ = 0;
    clear_has_data();
  }
}
inline float DataItem::datafloat() const {
  // @@protoc_insertion_point(field_get:embDB_protolayout.DataItem.dataFloat)
  if (has_datafloat()) {
    return data_.datafloat_;
  }
  return 0;
}
inline void DataItem::set_datafloat(float value) {
  if (!has_datafloat()) {
    clear_data();
    set_has_datafloat();
  }
  data_.datafloat_ = value;
  // @@protoc_insertion_point(field_set:embDB_protolayout.DataItem.dataFloat)
}

// double dataDouble = 8;
inline bool DataItem::has_datadouble() const {
  return data_case() == kDataDouble;
}
inline void DataItem::set_has_datadouble() {
  _oneof_case_[0] = kDataDouble;
}
inline void DataItem::clear_datadouble() {
  if (has_datadouble()) {
    data_.datadouble_ = 0;
    clear_has_data();
  }
}
inline double DataItem::datadouble() const {
  // @@protoc_insertion_point(field_get:embDB_protolayout.DataItem.dataDouble)
  if (has_datadouble()) {
    return data_.datadouble_;
  }
  return 0;
}
inline void DataItem::set_datadouble(double value) {
  if (!has_datadouble()) {
    clear_data();
    set_has_datadouble();
  }
  data_.datadouble_ = value;
  // @@protoc_insertion_point(field_set:embDB_protolayout.DataItem.dataDouble)
}

// bool dataBool = 9;
inline bool DataItem::has_databool() const {
  return data_case() == kDataBool;
}
inline void DataItem::set_has_databool() {
  _oneof_case_[0] = kDataBool;
}
inline void DataItem::clear_databool() {
  if (has_databool()) {
    data_.databool_ = false;
    clear_has_data();
  }
}
inline bool DataItem::databool() const {
  // @@protoc_insertion_point(field_get:embDB_protolayout.DataItem.dataBool)
  if (has_databool()) {
    return data_.databool_;
  }
  return false;
}
inline void DataItem::set_databool(bool value) {
  if (!has_databool()) {
    clear_data();
    set_has_databool();
  }
  data_.databool_ = value;
  // @@protoc_insertion_point(field_set:embDB_protolayout.DataItem.dataBool)
}

// bytes dataBytes = 10;
inline bool DataItem::has_databytes() const {
  return data_case() == kDataBytes;
}
inline void DataItem::set_has_databytes() {
  _oneof_case_[0] = kDataBytes;
}
inline void DataItem::clear_databytes() {
  if (has_databytes()) {
    data_.databytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const ::std::string& DataItem::databytes() const {
  // @@protoc_insertion_point(field_get:embDB_protolayout.DataItem.dataBytes)
  if (has_databytes()) {
    return data_.databytes_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void DataItem::set_databytes(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:embDB_protolayout.DataItem.dataBytes)
  if (!has_databytes()) {
    clear_data();
    set_has_databytes();
    data_.databytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.databytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:embDB_protolayout.DataItem.dataBytes)
}
#if LANG_CXX11
inline void DataItem::set_databytes(::std::string&& value) {
  // @@protoc_insertion_point(field_set:embDB_protolayout.DataItem.dataBytes)
  if (!has_databytes()) {
    clear_data();
    set_has_databytes();
    data_.databytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.databytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:embDB_protolayout.DataItem.dataBytes)
}
#endif
inline void DataItem::set_databytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_databytes()) {
    clear_data();
    set_has_databytes();
    data_.databytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.databytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:embDB_protolayout.DataItem.dataBytes)
}
inline void DataItem::set_databytes(const void* value, size_t size) {
  if (!has_databytes()) {
    clear_data();
    set_has_databytes();
    data_.databytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.databytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:embDB_protolayout.DataItem.dataBytes)
}
inline ::std::string* DataItem::mutable_databytes() {
  if (!has_databytes()) {
    clear_data();
    set_has_databytes();
    data_.databytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:embDB_protolayout.DataItem.dataBytes)
  return data_.databytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataItem::release_databytes() {
  // @@protoc_insertion_point(field_release:embDB_protolayout.DataItem.dataBytes)
  if (has_databytes()) {
    clear_has_data();
    return data_.databytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void DataItem::set_allocated_databytes(::std::string* databytes) {
  if (!has_databytes()) {
    data_.databytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (databytes != NULL) {
    set_has_databytes();
    data_.databytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), databytes);
  }
  // @@protoc_insertion_point(field_set_allocated:embDB_protolayout.DataItem.dataBytes)
}

inline bool DataItem::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void DataItem::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline DataItem::DataCase DataItem::data_case() const {
  return DataItem::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DataRow

// uint64 hash = 1;
inline void DataRow::clear_hash() {
  hash_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DataRow::hash() const {
  // @@protoc_insertion_point(field_get:embDB_protolayout.DataRow.hash)
  return hash_;
}
inline void DataRow::set_hash(::google::protobuf::uint64 value) {
  
  hash_ = value;
  // @@protoc_insertion_point(field_set:embDB_protolayout.DataRow.hash)
}

// string name = 2;
inline void DataRow::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataRow::name() const {
  // @@protoc_insertion_point(field_get:embDB_protolayout.DataRow.name)
  return name_.GetNoArena();
}
inline void DataRow::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:embDB_protolayout.DataRow.name)
}
#if LANG_CXX11
inline void DataRow::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:embDB_protolayout.DataRow.name)
}
#endif
inline void DataRow::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:embDB_protolayout.DataRow.name)
}
inline void DataRow::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:embDB_protolayout.DataRow.name)
}
inline ::std::string* DataRow::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:embDB_protolayout.DataRow.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataRow::release_name() {
  // @@protoc_insertion_point(field_release:embDB_protolayout.DataRow.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataRow::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:embDB_protolayout.DataRow.name)
}

// .embDB_protolayout.DataType type = 3;
inline void DataRow::clear_type() {
  type_ = 0;
}
inline ::embDB_protolayout::DataType DataRow::type() const {
  // @@protoc_insertion_point(field_get:embDB_protolayout.DataRow.type)
  return static_cast< ::embDB_protolayout::DataType >(type_);
}
inline void DataRow::set_type(::embDB_protolayout::DataType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:embDB_protolayout.DataRow.type)
}

// uint32 maxItems = 4;
inline void DataRow::clear_maxitems() {
  maxitems_ = 0u;
}
inline ::google::protobuf::uint32 DataRow::maxitems() const {
  // @@protoc_insertion_point(field_get:embDB_protolayout.DataRow.maxItems)
  return maxitems_;
}
inline void DataRow::set_maxitems(::google::protobuf::uint32 value) {
  
  maxitems_ = value;
  // @@protoc_insertion_point(field_set:embDB_protolayout.DataRow.maxItems)
}

// uint32 curItem = 5;
inline void DataRow::clear_curitem() {
  curitem_ = 0u;
}
inline ::google::protobuf::uint32 DataRow::curitem() const {
  // @@protoc_insertion_point(field_get:embDB_protolayout.DataRow.curItem)
  return curitem_;
}
inline void DataRow::set_curitem(::google::protobuf::uint32 value) {
  
  curitem_ = value;
  // @@protoc_insertion_point(field_set:embDB_protolayout.DataRow.curItem)
}

// bool overflow = 6;
inline void DataRow::clear_overflow() {
  overflow_ = false;
}
inline bool DataRow::overflow() const {
  // @@protoc_insertion_point(field_get:embDB_protolayout.DataRow.overflow)
  return overflow_;
}
inline void DataRow::set_overflow(bool value) {
  
  overflow_ = value;
  // @@protoc_insertion_point(field_set:embDB_protolayout.DataRow.overflow)
}

// repeated .embDB_protolayout.DataItem items = 7;
inline int DataRow::items_size() const {
  return items_.size();
}
inline void DataRow::clear_items() {
  items_.Clear();
}
inline ::embDB_protolayout::DataItem* DataRow::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:embDB_protolayout.DataRow.items)
  return items_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::embDB_protolayout::DataItem >*
DataRow::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:embDB_protolayout.DataRow.items)
  return &items_;
}
inline const ::embDB_protolayout::DataItem& DataRow::items(int index) const {
  // @@protoc_insertion_point(field_get:embDB_protolayout.DataRow.items)
  return items_.Get(index);
}
inline ::embDB_protolayout::DataItem* DataRow::add_items() {
  // @@protoc_insertion_point(field_add:embDB_protolayout.DataRow.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::embDB_protolayout::DataItem >&
DataRow::items() const {
  // @@protoc_insertion_point(field_list:embDB_protolayout.DataRow.items)
  return items_;
}

// -------------------------------------------------------------------

// DataLayout

// .embDB_protolayout.Header header = 1;
inline bool DataLayout::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void DataLayout::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::embDB_protolayout::Header& DataLayout::_internal_header() const {
  return *header_;
}
inline const ::embDB_protolayout::Header& DataLayout::header() const {
  const ::embDB_protolayout::Header* p = header_;
  // @@protoc_insertion_point(field_get:embDB_protolayout.DataLayout.header)
  return p != NULL ? *p : *reinterpret_cast<const ::embDB_protolayout::Header*>(
      &::embDB_protolayout::_Header_default_instance_);
}
inline ::embDB_protolayout::Header* DataLayout::release_header() {
  // @@protoc_insertion_point(field_release:embDB_protolayout.DataLayout.header)
  
  ::embDB_protolayout::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::embDB_protolayout::Header* DataLayout::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::embDB_protolayout::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:embDB_protolayout.DataLayout.header)
  return header_;
}
inline void DataLayout::set_allocated_header(::embDB_protolayout::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:embDB_protolayout.DataLayout.header)
}

// repeated .embDB_protolayout.DataRow rows = 2;
inline int DataLayout::rows_size() const {
  return rows_.size();
}
inline void DataLayout::clear_rows() {
  rows_.Clear();
}
inline ::embDB_protolayout::DataRow* DataLayout::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:embDB_protolayout.DataLayout.rows)
  return rows_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::embDB_protolayout::DataRow >*
DataLayout::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:embDB_protolayout.DataLayout.rows)
  return &rows_;
}
inline const ::embDB_protolayout::DataRow& DataLayout::rows(int index) const {
  // @@protoc_insertion_point(field_get:embDB_protolayout.DataLayout.rows)
  return rows_.Get(index);
}
inline ::embDB_protolayout::DataRow* DataLayout::add_rows() {
  // @@protoc_insertion_point(field_add:embDB_protolayout.DataLayout.rows)
  return rows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::embDB_protolayout::DataRow >&
DataLayout::rows() const {
  // @@protoc_insertion_point(field_list:embDB_protolayout.DataLayout.rows)
  return rows_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace embDB_protolayout

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::embDB_protolayout::DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::embDB_protolayout::DataType>() {
  return ::embDB_protolayout::DataType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_embdb_2dlayout_2eproto
